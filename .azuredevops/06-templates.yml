trigger: none

resources:
  containers:
  - container: mssql
    image: mcr.microsoft.com/mssql/server:2022-latest
    env:
      ACCEPT_EULA: Y
      #SA_PASSWORD defined in Build stage
      SA_PASSWORD: $(SA_PASSWORD)
      MSSQL_PID: Developer
    ports: 
      - 1433:1433
    options: --name mssql

jobs: 
- job: Build
  pool:
    vmImage: ubuntu-24.04
  variables:
  - name: DOTNET_NOLOGO
    value: true
    readonly: true
  - name: SA_PASSWORD
    value: Normally_This_Is_A_Secret#01!
    readonly: true
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE 
    value: true
    readonly: true
    #Override to create env variable to have control where the global packages are stored for caching: https://learn.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders
  - name: NUGET_PACKAGES
    value: '$(Pipeline.Workspace)/.nuget/packages/'
    readonly: true
  - name: DOTNET_VERSION 
    value: 9
    readonly: true

  services:
    mssql: mssql
  
  steps:
  - script: |
      # Install dependencies for sqlcmd
      curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
      sudo add-apt-repository "$(wget -qO- https://packages.microsoft.com/config/ubuntu/22.04/prod.list)"
      sudo apt-get install sqlcmd
      # Add SQLCMD to PATH for the current session
      echo "export PATH=\$PATH:/opt/mssql-tools/bin" >> ~/.bashrc
      source ~/.bashrc
      # Verify installation
      sqlcmd -?
    displayName: 'Install and verify sqlcmd on Ubuntu'

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '${{variables.DOTNET_VERSION}}.x'
      includePreviewVersions: false

  - task: DotNetCoreCLI@2
    displayName: Dotnet restore '**/*.csproj'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      restoreArguments: '--locked-mode'
      feedsToUse: 'select'
      verbosityRestore: 'Minimal'

  - task: DotNetCoreCLI@2
    displayName: Dotnet build
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--no-restore --configuration Release'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'tool'
      arguments: 'restore'
      workingDirectory: '$(Build.SourcesDirectory)/TodoItems.Api'
    displayName: 'Restore dotnet tools'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'custom'
      custom: 'ef'
      arguments: 'migrations script --output $(Build.ArtifactStagingDirectory)/SQL/db.sql --idempotent --project TodoItems.Api.csproj --context TodoDb --no-build --verbose --configuration Release'
      workingDirectory: '$(Build.SourcesDirectory)/TodoItems.Api'
    displayName: 'Create idempotent SQL'
    env:
      #Pass environment variable dummy. So the migration script will not be created against the InMemory database.
      ASPNETCORE_ENVIRONMENT: 'DUMMY'

  - script: |
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -Q 'CREATE DATABASE TodoItemsDB' -b
        sqlcmd -S 127.0.0.1,1433 -U SA -P '$(SA_PASSWORD)' -i db.sql -d TodoItemsDB -b
    workingDirectory: '$(Build.ArtifactStagingDirectory)/SQL'
    displayName: 'Create database and tables for unit tests'
    timeoutInMinutes: 1

  - task: DotNetCoreCLI@2
    displayName: Dotnet test '**/*Tests.csproj'
    inputs:
      command: 'test'
      projects: '**/*Tests.csproj'
      arguments: '--no-build --nologo --configuration Release'
    env:
      integrationtests_ConnectionStrings__TodoDb: 'Server=127.0.0.1,1433;Database=TodoItemsDB;User Id=SA;Password=$(SA_PASSWORD);TrustServerCertificate=true;'
