name: 05-service-containers
on: 
  workflow_dispatch:

defaults:
  run:
    shell: pwsh

jobs:
  build:
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: ${{env.SA_PASSWORD}}
          MSSQL_PID: Developer
        options: --name mssql
        ports:
          - 1433:1433
    runs-on: ubuntu-24.04
    env:
      SA_PASSWORD: 'Normally_This_Is_A_Secret#01!'
      NUGET_PACKAGES: '${{github.workspace}}/.nuget/packages'
    steps:    
    - uses: actions/checkout@v4

    - name: Retrieve version
      id: set-dotnet-version
      run: |
            # URL to the .NET release metadata
            $releasesUrl = "https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json"
              
            # Fetch and parse the JSON data
            $releasesData = Invoke-RestMethod -Uri $releasesUrl -UseBasicParsing
              
            # Filter for .NET 9 releases and get the latest version
            $dotNet9 = $releasesData."releases-index" | Where-Object { $_."channel-version" -like "9.0" }
            $latestNet9Sdk = $dotNet9."latest-sdk"

            # Output the latest information about .NET 9
            Write-Output "Latest .NET 9 SDK: $latestNet9Sdk"
            echo "DOTNET_VERSION=$latestNet9Sdk" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      shell: pwsh
      
    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: ${{runner.tool_cache}}/dotnet
        key: ${{runner.os}}-${{ steps.set-dotnet-version.outputs.DOTNET_VERSION }}

    - uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ steps.set-dotnet-version.outputs.DOTNET_VERSION }}
        
    - name: Restore cache
      uses: actions/cache@v4
      with:
        path: ${{env.NUGET_PACKAGES}}
        key: ${{runner.os}}-build-${{ hashFiles('**/packages.lock.json', '!**/bin/**', '!**/obj/**') }}        

    - name: Dotnet restore
      run: dotnet restore --locked-mode --nologo
    
    - name: Dotnet build
      run: dotnet build --no-restore --configuration Release

    - name: Restore tools
      run: dotnet tool restore
      working-directory: ${{github.workspace}}/TodoItems.Api
    
    - name: Create idempotent SQL scripts
      run: dotnet ef migrations script --output '${{github.workspace}}/artifacts/SQL/db.sql' --idempotent --project TodoItems.Api.csproj --context TodoDb --no-build --configuration Release
      working-directory: ${{github.workspace}}/TodoItems.Api
      env:
        #Pass environment variable dummy. So the migration script will not be created against the InMemory database.
        ASPNETCORE_ENVIRONMENT: 'DUMMY'

    - name: copy script for creation of database
      run: docker cp ${{github.workspace}}/artifacts/SQL/db.sql ${{ job.services.mssql.id }}:/tmp/db.sql

    - name: Create database for integration tests
      run: |
          docker exec ${{ job.services.mssql.id }} /opt/mssql-tools18/bin/sqlcmd -S 127.0.0.1,1433 -U SA -P '${{env.SA_PASSWORD}}' -Q 'CREATE DATABASE TodoItemsDB' -b -C
          docker exec ${{ job.services.mssql.id }} /opt/mssql-tools18/bin/sqlcmd -S 127.0.0.1,1433 -U SA -P '${{env.SA_PASSWORD}}' -i /tmp/db.sql -d TodoItemsDB -b -C
      working-directory: '${{github.workspace}}/artifacts/SQL'
      timeout-minutes: 1

    - name: Run tests
      run: dotnet test --no-build --configuration Release --logger:"console;verbosity=detailed"
      env:
        integrationtests_ConnectionStrings__TodoDb: 'Server=127.0.0.1,1433;Database=TodoItemsDB;User Id=SA;Password=${{env.SA_PASSWORD}};TrustServerCertificate=true;'
